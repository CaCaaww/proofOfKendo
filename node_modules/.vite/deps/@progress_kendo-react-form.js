"use client";
import {
  a3 as a,
  e5 as e,
  h,
  h2,
  l,
  n3 as n,
  n6 as n2,
  o2 as o,
  p,
  require_prop_types,
  s3 as s,
  z
} from "./chunk-G2W6GMXM.js";
import "./chunk-LUOAFIJJ.js";
import {
  __toESM,
  require_react
} from "./chunk-MEA6YV6E.js";

// node_modules/@progress/kendo-react-form/Field.mjs
var t2 = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-form/FormContext.mjs
var t = __toESM(require_react(), 1);
var o2 = t.createContext(null);

// node_modules/@progress/kendo-react-form/Field.mjs
var v = (h3) => {
  const { name: e4, component: r, validator: s2, children: u2, onChange: l2, ...i } = h3, o3 = t2.useContext(o2), a3 = o3 ? o3.id : "";
  t2.useEffect(() => o3 ? o3.registerField(e4, s2) : void 0, [e4, a3, s2]);
  const m2 = t2.useCallback(
    (n6) => {
      const f = n6 && (n6.value !== void 0 ? n6.value : n6.target ? n6.target.value : n6.target);
      o3.onChange(e4, { value: f }), l2 && l2.call(void 0, n6);
    },
    [e4, a3, l2]
  ), C = t2.useCallback(
    (n6) => o3.onChange(e4, { value: n6.target.value }),
    [e4, a3]
  ), c2 = t2.useCallback(() => o3.onBlur(e4), [e4, a3]), d = t2.useCallback(() => o3.onFocus(e4), [e4, a3]);
  if (!o3)
    return null;
  const g = o3.valueGetter(e4);
  return typeof r == "string" ? t2.createElement(r, {
    onChange: C,
    onBlur: c2,
    onFocus: d,
    value: g,
    children: u2,
    ...i
  }) : t2.createElement(r, {
    children: u2,
    ...i,
    // input
    onChange: m2,
    onBlur: c2,
    onFocus: d,
    value: g,
    // meta
    validationMessage: o3.errors[e4],
    touched: o3.touched[e4],
    modified: o3.modified[e4],
    visited: o3.visited[e4],
    // Our `valid` implementation requires double submit to show html5 validation errors,
    // however it's NOT recommended to show html5 validation errors at all as:
    // - There is no standard way to change validation look and feel with CSS.
    // - Look different in each browser / OS
    // - You can have a page in one language but an error message displayed in another language (not localizable)
    valid: !(o3.errors[e4] && o3.touched[e4]),
    name: e4
  });
};
v.displayName = "KendoReactField";

// node_modules/@progress/kendo-react-form/Form.mjs
var u = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-form/package-metadata.mjs
var e2 = {
  name: "@progress/kendo-react-form",
  productName: "KendoReact",
  productCode: "KENDOUIREACT",
  productCodes: ["KENDOUIREACT"],
  publishDate: 1745410752,
  version: "10.2.0",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/components/my-license/"
};

// node_modules/@progress/kendo-react-form/Form.mjs
var b = 0;
var n3 = class n4 extends u.Component {
  /**
   * @hidden
   */
  constructor(o3) {
    super(o3), this._touched = {}, this._visited = {}, this._modified = {}, this._validatorsByField = {}, this._values = {}, this._fields = {}, this._unmounted = false, this._submitted = false, this.showLicenseWatermark = false, this.isValid = () => this.isFormValid(this.errors), this.accumulatedForceUpdate = () => {
      this._accumulatorTimeout && clearTimeout(this._accumulatorTimeout), this._accumulatorTimeout = window.setTimeout(() => {
        this._accumulatorTimeout = void 0, this.forceUpdate();
      }, b);
    }, this.resetForm = () => {
      this.values = p(this.props.initialValues), this._key = e(), this._touched = {}, this._visited = {}, this._modified = {}, this._validatorsByField = {}, this._fields = {}, this._submitted = false, this.forceUpdate();
    }, this.onReset = () => this.resetForm(), this.addField = (t5) => {
      this._fields[t5] = true;
    }, this.onSubmit = (t5) => {
      const i = {}, e4 = this.fields;
      t5 && (typeof t5.preventDefault == "function" && t5.preventDefault(), typeof t5.stopPropagation == "function" && t5.stopPropagation()), e4.forEach((d) => {
        i[d] = true;
      }), this.visited = { ...i }, this.touched = { ...i };
      const s2 = this.values, h3 = this.isFormValid(this.errors), r = this.isFormModified(this.modified, e4);
      this.props.onSubmitClick && this.props.onSubmitClick.call(void 0, {
        values: s2,
        isValid: h3,
        isModified: r,
        event: t5
      }), h3 && (this.props.ignoreModified || r) && this.props.onSubmit && (this._submitted = true, this.props.onSubmit.call(void 0, s2, t5)), this.forceUpdate();
    }, this.onChange = (t5, i) => {
      const { value: e4 } = i;
      this.addField(t5), this.modified[t5] || (this.modified = { ...this.modified, [t5]: true }), this.valueSetter(t5, e4), this.forceUpdate();
    }, this.onFocus = (t5, i) => {
      this.visited[t5] || (this.visited = { ...this.visited, [t5]: true }, i || this.forceUpdate());
    }, this.onBlur = (t5, i) => {
      this.touched[t5] || (this.onFocus(t5, i), this.touched = { ...this.touched, [t5]: true }, i || this.forceUpdate());
    }, this.onFieldRegister = (t5, i) => {
      this.addField(t5);
      const e4 = this.validatorsByField[t5] || [], s2 = e4.length;
      return this.validatorsByField = { ...this.validatorsByField, [t5]: [...e4, i] }, this.accumulatedForceUpdate(), () => {
        if (this._unmounted)
          return;
        const h3 = [...this.validatorsByField[t5] || []], r = !!h3[s2];
        h3[s2] = void 0, this.validatorsByField = { ...this.validatorsByField, [t5]: h3 }, r && this.accumulatedForceUpdate();
      };
    }, this.isFormValid = (t5) => !Object.keys(t5).some((i) => !!t5[i]), this.isFormModified = (t5, i) => i.some((e4) => t5[e4]), this.isFormHasNotTouched = (t5, i) => i.some((e4) => !t5[e4]), this.isFormTouched = (t5, i) => i.some((e4) => t5[e4]), this.isFormVisited = (t5, i) => i.some((e4) => t5[e4]), this.valueGetter = (t5) => s(t5)(this.values), this.valueSetter = (t5, i) => h(t5)(this.values, i), this.onArrayAction = (t5) => {
      this.addField(t5), this.modified[t5] || (this.modified = { ...this.modified, [t5]: true }), this.onBlur(t5, true);
    }, this.onInsert = (t5, i) => {
      this.onArrayAction(t5);
      const e4 = [...this.valueGetter(t5) || []];
      e4.splice(i.index, 0, i.value), this.valueSetter(t5, e4), this.forceUpdate();
    }, this.onUnshift = (t5, i) => {
      this.onInsert(t5, {
        value: i.value,
        index: 0
      });
    }, this.onPush = (t5, i) => {
      this.onArrayAction(t5);
      const e4 = [...this.valueGetter(t5) || [], i.value];
      this.valueSetter(t5, e4), this.forceUpdate();
    }, this.onPop = (t5) => {
      this.onArrayAction(t5);
      const i = [...this.valueGetter(t5) || []], e4 = i.pop();
      return this.valueSetter(t5, i), this.forceUpdate(), e4;
    }, this.onRemove = (t5, i) => {
      this.onArrayAction(t5);
      const e4 = [...this.valueGetter(t5) || []], s2 = e4.splice(i.index, 1);
      return this.valueSetter(t5, e4), this.forceUpdate(), s2;
    }, this.onReplace = (t5, i) => {
      this.onArrayAction(t5);
      const e4 = [...this.valueGetter(t5) || []];
      e4.splice(i.index, 1, i.value), this.valueSetter(t5, e4), this.forceUpdate();
    }, this.onMove = (t5, i) => {
      this.onArrayAction(t5);
      const e4 = [...this.valueGetter(t5) || []], s2 = e4[i.prevIndex];
      e4.splice(i.prevIndex, 1), e4.splice(i.nextIndex, 0, s2), this.valueSetter(t5, e4), this.forceUpdate();
    }, this.showLicenseWatermark = !h2(e2, { component: "Form" }), this.values = p(o3.initialValues);
  }
  /**
   * @hidden
   */
  get touched() {
    return this._touched;
  }
  /**
   * @hidden
   */
  set touched(o3) {
    this._touched = o3;
  }
  /**
   * @hidden
   */
  get visited() {
    return this._visited;
  }
  /**
   * @hidden
   */
  set visited(o3) {
    this._visited = o3;
  }
  /**
   * @hidden
   */
  get modified() {
    return this._modified;
  }
  /**
   * @hidden
   */
  set modified(o3) {
    this._modified = o3;
  }
  /**
   * @hidden
   */
  get validatorsByField() {
    return this._validatorsByField;
  }
  /**
   * @hidden
   */
  set validatorsByField(o3) {
    this._validatorsByField = o3;
  }
  /**
   * @hidden
   */
  get values() {
    return this._values;
  }
  /**
   * @hidden
   */
  set values(o3) {
    this._values = o3;
  }
  /**
   * @hidden
   */
  get fields() {
    return Object.keys(this._fields);
  }
  /**
   * @hidden
   */
  get formErrors() {
    if (this.props.validator)
      return this.props.validator(this.values, this.valueGetter);
  }
  /**
   * @hidden
   */
  get errors() {
    const o3 = {}, t5 = this.fields, i = this.validatorsByField;
    return t5.forEach((s2) => {
      if (o3[s2] = "", i[s2]) {
        const h3 = [];
        i[s2].forEach((r) => {
          Array.isArray(r) ? h3.push(...r) : h3.push(r);
        }), h3.find((r) => {
          if (r) {
            const d = r(this.valueGetter(s2), this.valueGetter, { name: s2 });
            if (d)
              return o3[s2] = d, true;
          }
          return false;
        });
      }
    }), this.formErrors && o(this.formErrors, o3), o3;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    this._unmounted = true, this._accumulatorTimeout && clearTimeout(this._accumulatorTimeout);
  }
  /**
   * @hidden
   */
  render() {
    const { render: o3 } = this.props, t5 = this.touched, i = this.visited, e4 = this.modified, s2 = this.fields, h3 = this.errors, r = this.isFormValid(h3), d = this.isFormModified(e4, s2), f = this.isFormTouched(t5, s2), m2 = this.isFormVisited(i, s2), v2 = this.isFormHasNotTouched(t5, s2) && !r || r && (this.props.ignoreModified || d);
    return u.createElement(u.Fragment, null, u.createElement(
      o2.Provider,
      {
        key: this._key || this.props.id,
        value: {
          id: this.props.id,
          valueGetter: this.valueGetter,
          errors: h3,
          modified: e4,
          touched: t5,
          visited: i,
          registerField: this.onFieldRegister,
          onSubmit: this.onSubmit,
          onChange: this.onChange,
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          onUnshift: this.onUnshift,
          onPush: this.onPush,
          onInsert: this.onInsert,
          onPop: this.onPop,
          onRemove: this.onRemove,
          onReplace: this.onReplace,
          onMove: this.onMove
        }
      },
      o3({
        valid: r,
        modified: d,
        touched: f,
        visited: m2,
        submitted: this._submitted,
        valueGetter: this.valueGetter,
        errors: h3,
        allowSubmit: v2,
        onChange: this.onChange,
        onSubmit: this.onSubmit,
        onFormReset: this.resetForm
      })
    ), this.showLicenseWatermark && u.createElement(l, null));
  }
};
n3.displayName = "KendoReactForm", n3.propTypes = {
  initialValues: import_prop_types.default.any,
  onSubmit: import_prop_types.default.func,
  onSubmitClick: import_prop_types.default.func,
  render: import_prop_types.default.func.isRequired,
  id: import_prop_types.default.string
};
var c = n3;

// node_modules/@progress/kendo-react-form/FieldArray.mjs
var t3 = __toESM(require_react(), 1);
var k = (a3) => {
  const { name: e4, component: l2, validator: r, type: F, children: c2, ...i } = a3, o3 = t3.useContext(o2), s2 = o3 ? o3.id : "";
  t3.useEffect(() => o3 ? o3.registerField(e4, r) : void 0, [e4, s2, r]);
  const u2 = t3.useCallback((n6) => o3.onUnshift(e4, n6), [e4, s2]), d = t3.useCallback((n6) => o3.onPush(e4, n6), [e4, s2]), m2 = t3.useCallback((n6) => o3.onInsert(e4, n6), [e4, s2]), f = t3.useCallback(() => o3.onPop(e4), [e4, s2]), v2 = t3.useCallback((n6) => o3.onRemove(e4, n6), [e4, s2]), p2 = t3.useCallback((n6) => o3.onReplace(e4, n6), [e4, s2]), h3 = t3.useCallback((n6) => o3.onMove(e4, n6), [e4, s2]);
  if (!o3)
    return null;
  const C = o3.valueGetter(e4);
  return t3.createElement(l2, {
    // input
    value: C,
    // meta
    validationMessage: o3.errors[e4],
    touched: o3.touched[e4],
    modified: o3.modified[e4],
    visited: o3.visited[e4],
    // Our `valid` implementation requires double submit to show html5 validation errors,
    // however it's NOT recommended to show html5 validation errors at all as:
    // - There is no standard way to change validation look and feel with CSS.
    // - Look different in each browser / OS
    // - You can have a page in one language but an error message displayed in another language (not localizable)
    valid: !(o3.errors[e4] && o3.touched[e4]),
    onUnshift: u2,
    onPush: d,
    onInsert: m2,
    onPop: f,
    onRemove: v2,
    onReplace: p2,
    onMove: h3,
    children: c2,
    name: e4,
    ...i
  });
};
k.displayName = "KendoReactFieldArray";

// node_modules/@progress/kendo-react-form/FieldWrapper.mjs
var t4 = __toESM(require_react(), 1);
var n5 = (e4) => {
  const a3 = n2(), s2 = e4.unstyled || a3, l2 = s2 && s2.uForm, c2 = t4.useMemo(
    () => n(
      z.field({
        c: l2,
        isRtl: e4.dir === "rtl"
      }),
      e4.className
    ),
    [l2, e4.className, e4.dir]
  );
  return t4.createElement("div", { className: c2, style: e4.style }, e4.children);
};
n5.displayName = "KendoReactFieldWrapper";

// node_modules/@progress/kendo-react-form/FormElement.mjs
var e3 = __toESM(require_react(), 1);
var R = e3.forwardRef((o3, f) => {
  const s2 = {
    size: "medium",
    ...o3
  }, n6 = e3.useRef(null), m2 = e3.useRef(null);
  e3.useImperativeHandle(m2, () => ({ element: n6.current, props: s2 })), e3.useImperativeHandle(f, () => m2.current);
  const t5 = e3.useContext(o2), { className: l2, style: h3, horizontal: r, size: a3, ...d } = s2, i = n2(), c2 = i && i.uForm, u2 = e3.useMemo(() => {
    if (r)
      return "horizontal";
    if (r === false)
      return "vertical";
  }, [r]), p2 = e3.useMemo(
    () => n(
      z.form({
        c: c2,
        size: a3,
        orientation: u2
      }),
      l2
    ),
    [l2, c2, u2, a3]
  );
  return e3.createElement(
    "form",
    {
      ref: n6,
      ...d,
      id: t5 ? t5.id : void 0,
      style: o3.style,
      className: p2,
      onSubmit: t5 ? t5.onSubmit : void 0
    },
    o3.children
  );
});
R.displayName = "KendoReactFormElement";

// node_modules/@progress/kendo-react-form/index.mjs
var m = a(c);
m.displayName = "KendoReactForm";
export {
  v as Field,
  k as FieldArray,
  n5 as FieldWrapper,
  m as Form,
  c as FormClassComponent,
  R as FormElement
};
/*! Bundled license information:

@progress/kendo-react-form/FormContext.mjs:
@progress/kendo-react-form/Field.mjs:
@progress/kendo-react-form/package-metadata.mjs:
@progress/kendo-react-form/Form.mjs:
@progress/kendo-react-form/FieldArray.mjs:
@progress/kendo-react-form/FieldWrapper.mjs:
@progress/kendo-react-form/FormElement.mjs:
@progress/kendo-react-form/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)
*/
//# sourceMappingURL=@progress_kendo-react-form.js.map
