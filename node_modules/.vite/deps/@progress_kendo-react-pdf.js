"use client";
import {
  drawDOM,
  exportPDF
} from "./chunk-CGKFRIZ2.js";
import {
  require_server_browser,
  saveAs
} from "./chunk-ODDI7HNF.js";
import "./chunk-SEKLCGMZ.js";
import {
  h,
  l,
  require_prop_types
} from "./chunk-SS2A4NRG.js";
import {
  require_react_dom
} from "./chunk-NXESFFTV.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@progress/kendo-react-pdf/PDFExport.mjs
var t3 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-pdf/getPageMargin.mjs
var a = __toESM(require_react(), 1);

// node_modules/@progress/kendo-react-pdf/PDFMargin.mjs
var n = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);
var t = class t2 extends n.Component {
  render() {
    return null;
  }
};
t.propTypes = {
  left: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  top: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  right: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  bottom: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string])
};
var r = t;

// node_modules/@progress/kendo-react-pdf/getPageMargin.mjs
var i = ["bottom", "left", "right", "top"];
function s(r4) {
  const n6 = a.Children.toArray(r4.children).find((t4) => t4 && t4.type === r);
  return n6 ? g(n6) : r4.margin;
}
function g(r4) {
  const n6 = {};
  for (let t4 = 0; t4 < i.length; t4++) {
    const o6 = i[t4], e7 = r4.props[o6];
    e7 !== void 0 && (n6[o6] = e7);
  }
  return n6;
}

// node_modules/@progress/kendo-react-pdf/KendoDrawingAdapter.mjs
var p = __toESM(require_react(), 1);
var r2 = __toESM(require_server_browser(), 1);
var n2 = "export.pdf";
var h2 = "KendoReact PDF Generator";
var c = class {
  constructor(t4, o6, e7, i7, a7 = {}) {
    this.drawDOM = t4, this.exportPDF = o6, this.saveAs = e7, this.domElement = i7, this.options = a7, this.convertPageTemplateToHtml = (s4) => `<span>${r2.renderToStaticMarkup(
      p.createElement(this.options.pageTemplate, {
        pageNum: s4.pageNum,
        totalPages: s4.totalPages
      })
    )}</span>`;
  }
  savePDF(t4) {
    const o6 = this.drawDOM(this.domElement, this.getDrawOptions()).then((e7) => this.exportPDF(e7, this.getPDFOptions())).then((e7) => this.saveAs(e7, this.options.fileName || n2, this.getSaveOptions()));
    t4 && o6.then(t4, t4);
  }
  getDrawOptions() {
    return {
      avoidLinks: this.options.avoidLinks,
      forcePageBreak: this.options.forcePageBreak,
      keepTogether: this.options.keepTogether,
      margin: this.options.margin,
      paperSize: this.options.paperSize,
      landscape: this.options.landscape,
      repeatHeaders: this.options.repeatHeaders,
      scale: this.options.scale,
      template: this.options.pageTemplate && this.convertPageTemplateToHtml
    };
  }
  getPDFOptions() {
    return {
      author: this.options.author,
      creator: this.options.creator || h2,
      date: this.options.date,
      imgDPI: this.options.imageResolution,
      keywords: this.options.keywords,
      landscape: this.options.landscape,
      margin: this.options.margin,
      multiPage: true,
      paperSize: this.options.paperSize,
      producer: this.options.producer,
      subject: this.options.subject,
      title: this.options.title
    };
  }
  getSaveOptions() {
    return {
      forceProxy: this.options.forceProxy,
      proxyData: this.options.proxyData,
      proxyTarget: this.options.proxyTarget,
      proxyURL: this.options.proxyURL
    };
  }
};

// node_modules/@progress/kendo-react-pdf/package-metadata.mjs
var e2 = {
  name: "@progress/kendo-react-pdf",
  productName: "KendoReact",
  productCode: "KENDOUIREACT",
  productCodes: ["KENDOUIREACT"],
  publishDate: 1745410852,
  version: "10.2.0",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/components/my-license/"
};

// node_modules/@progress/kendo-react-pdf/PDFExport.mjs
var o = class o2 extends t3.Component {
  constructor(r4) {
    super(r4), this.rootElForPDF = null, this.showLicenseWatermark = false, this.showLicenseWatermark = !h(e2, { component: "PDFExport" });
  }
  /**
   * @hidden
   */
  render() {
    return t3.createElement(
      "div",
      {
        ref: (r4) => {
          this.rootElForPDF = r4;
        }
      },
      this.props.children,
      this.showLicenseWatermark && t3.createElement(l, null)
    );
  }
  /**
   * Saves the content as a PDF file.
   *
   * @param callback - The callback to be executed after the PDF is saved.
   */
  save(r4) {
    new c(drawDOM, exportPDF, saveAs, this.rootElForPDF, this.getOptions()).savePDF(r4);
  }
  getOptions() {
    return Object.assign({}, this.props, { margin: s(this.props) });
  }
};
o.propTypes = {
  author: import_prop_types2.default.string,
  avoidLinks: import_prop_types2.default.oneOfType([import_prop_types2.default.bool, import_prop_types2.default.string]),
  forcePageBreak: import_prop_types2.default.string,
  keepTogether: import_prop_types2.default.string,
  creator: import_prop_types2.default.string,
  date: import_prop_types2.default.instanceOf(Date),
  imageResolution: import_prop_types2.default.number,
  fileName: import_prop_types2.default.string,
  forceProxy: import_prop_types2.default.bool,
  keywords: import_prop_types2.default.string,
  landscape: import_prop_types2.default.bool,
  margin: import_prop_types2.default.oneOfType([
    import_prop_types2.default.string,
    import_prop_types2.default.number,
    import_prop_types2.default.shape({
      left: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
      top: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
      right: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
      bottom: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string])
    })
  ]),
  pageTemplate: import_prop_types2.default.any,
  paperSize: import_prop_types2.default.any,
  repeatHeaders: import_prop_types2.default.bool,
  scale: import_prop_types2.default.number,
  proxyData: import_prop_types2.default.any,
  proxyURL: import_prop_types2.default.string,
  proxyTarget: import_prop_types2.default.string,
  producer: import_prop_types2.default.string,
  subject: import_prop_types2.default.string,
  title: import_prop_types2.default.string
};
var n3 = o;

// node_modules/@progress/kendo-react-pdf/savePDF.mjs
function f(r4, o6 = {}, e7) {
  new c(drawDOM, exportPDF, saveAs, r4, o6).savePDF(e7);
}

// node_modules/@progress/kendo-react-pdf/grid/GridPDFExport.mjs
var r3 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-pdf/common/dom-queries.mjs
var e4 = {};
var n4 = (t4) => String(t4).trim().split(" ");
var l2 = (t4, s4) => {
  const r4 = n4(s4);
  return !!n4(t4.className).find((i7) => r4.indexOf(i7) >= 0);
};
var c2 = (t4) => (s4) => l2(s4, t4);
var f2 = (t4) => (e4[t4] || (e4[t4] = (s4) => String(s4.nodeName).toLowerCase() === t4.toLowerCase()), e4[t4]);
var a2 = (t4, s4, r4 = true) => {
  if (t4) {
    if (r4 && s4(t4))
      return t4;
    for (t4 = t4.firstChild; t4; ) {
      if (t4.nodeType === 1) {
        const i7 = a2(t4, s4);
        if (i7)
          return i7;
      }
      t4 = t4.nextSibling;
    }
  }
};

// node_modules/@progress/kendo-react-pdf/grid/grid-query.mjs
var o3 = "k-grid-header";
var i2 = "k-grid-footer";
var h3 = "TABLE";
var c3 = f2(h3);
var a3 = (s4) => s4 ? "locked" : "wrap";
var l3 = class {
  constructor(e7) {
    this.element = e7, this.list = a2(e7, c2("k-grid-container"));
  }
  content(e7) {
    return a2(this.list, c2(`k-grid-content${e7 ? "-locked" : ""}`));
  }
  header(e7) {
    return this.headerWrap = this.headerWrap || a2(this.element, c2(o3)), a2(this.headerWrap, c2(`${o3}-${a3(e7)}`));
  }
  footer(e7) {
    return this.footerWrap = this.footerWrap || a2(this.element, c2(i2)), a2(this.footerWrap, c2(`${i2}-${a3(e7)}`));
  }
  table() {
    return a2(this.element, c3);
  }
};

// node_modules/@progress/kendo-react-pdf/common/utils.mjs
var a4 = "k-first";
var g2 = "k-grid-header";
var h4 = "k-grid-footer";
var i3 = (e7, t4) => {
  const n6 = t4.length;
  for (let o6 = 0; o6 < n6; o6++)
    e7.appendChild(t4[o6].cloneNode(true));
};
var C = (e7) => {
  const t4 = document.createElement("div");
  return t4.className = "k-grid k-grid-md", t4.appendChild(e7), t4;
};
var d = (e7) => {
  const t4 = e7.length, n6 = e7[0].cloneNode(true), o6 = n6.rows.length;
  if (t4 > 1)
    for (let l4 = 0; l4 < o6; l4++)
      for (let s4 = 1; s4 < t4; s4++)
        i3(n6.rows[l4], e7[s4].rows[l4].cells);
  return n6;
};
var f3 = (e7, t4) => {
  if (t4.length > 1 && e7.rows.length > 1)
    for (let n6 = 1; n6 < e7.rows.length; n6++) {
      const o6 = t4[0].rows[n6].cells.length, l4 = e7.rows[n6].cells[o6];
      String(l4.className).indexOf(a4) === -1 && (l4.className += ` ${a4}`);
    }
};
var m = (e7, t4, n6, o6) => {
  const l4 = document.createElement("table"), s4 = e7[0].cloneNode(true);
  for (let c5 = 1; c5 < e7.length; c5++)
    i3(s4, e7[c5].querySelectorAll("col"));
  const r4 = d(t4), p2 = d(n6);
  if (r4.className = g2, f3(r4, t4), l4.appendChild(s4), l4.appendChild(r4), l4.appendChild(p2), o6.length) {
    const c5 = d(o6);
    c5.className = h4, l4.appendChild(c5);
  }
  return C(l4);
};

// node_modules/@progress/kendo-react-pdf/grid/export-element.mjs
var b = (c5) => {
  const e7 = new l3(c5), o6 = e7.content();
  let t4;
  if (o6) {
    const n6 = [o6.querySelector("colgroup")], l4 = [e7.header().querySelector("thead")], s4 = [o6.querySelector("tbody")], r4 = e7.footer(), u3 = r4 ? [r4.querySelector("tfoot")] : [];
    t4 = m(n6, l4, s4, u3);
  } else
    t4 = C(e7.table().cloneNode(true));
  return t4;
};

// node_modules/@progress/kendo-react-pdf/grid/provideSaveGridPDF.mjs
function m2(r4) {
  return (t4, o6 = {}, n6) => u(r4, t4, o6, n6);
}
function u(r4, t4, o6 = {}, n6) {
  let e7;
  i7();
  function i7() {
    r4(l4(), o6, p2);
  }
  function p2() {
    document.body.removeChild(e7), e7 = void 0, n6 && n6();
  }
  function l4() {
    e7 = document.createElement("div"), e7.className = "k-grid-pdf-export-element";
    const d2 = b(t4);
    return e7.appendChild(d2), document.body.appendChild(e7), d2;
  }
}

// node_modules/@progress/kendo-react-pdf/grid/GridPDFExport.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var i4 = class i5 extends r3.Component {
  constructor(t4) {
    super(t4), this.state = {
      show: false
    }, this.showLicenseWatermark = false, this.showLicenseWatermark = !h(e2, { component: "GridPDFExport" }), this.saveGridPDF = m2(this.getSavePDF()), this.gridInnerWrapperRef = r3.createRef();
  }
  /**
   * @hidden
   */
  componentDidUpdate(t4, s4) {
    this.state.show && this.state.show !== s4.show && this.saveGridPDF(
      this.gridInnerWrapperRef.current,
      Object.assign({}, this.props, { margin: s(this.props) }),
      this.callback
    );
  }
  /**
   * @hidden
   */
  render() {
    return r3.createElement(r3.Fragment, null, this.state.show && (0, import_react_dom.createPortal)(
      r3.createElement(
        "div",
        {
          style: {
            position: "absolute",
            left: "-5000px",
            top: "0px"
          }
        },
        r3.createElement("div", { ref: this.gridInnerWrapperRef }, this.prepareRawGridForExport(this.data))
      ),
      document.body
    ), this.showLicenseWatermark && r3.createElement(l, null));
  }
  /* eslint-disable max-len */
  /**
   * Saves the content of the Grid as a PDF file.
   *
   * @param data - The data can be different from the currently displayed data in the Grid. Can be used to export all Grid pages.
   * @param callback - The callback that will be executed after the PDF is saved.
   */
  // tslint:enable:max-line-length
  save(t4, s4) {
    this.grid = this.getGrid(), this.columns = this.getCustomColumns(), this.data = t4, this.callback = () => {
      this.setState({ show: false }), s4 && s4();
    }, this.setState({ show: true });
  }
  getSavePDF() {
    return f;
  }
  getGrid() {
    return r3.Children.toArray(this.props.children).find(
      (t4) => t4 && t4.type.displayName === "KendoReactGrid"
    );
  }
  getCustomColumns() {
    return r3.Children.toArray(this.props.children).filter(
      (t4) => t4 && t4.type.displayName === "KendoReactGridColumn"
    );
  }
  prepareRawGridForExport(t4) {
    const s4 = t4 && { data: t4, total: t4.length, pageSize: t4.length, skip: 0 }, a7 = { style: Object.assign({}, this.grid.props.style, { width: "1000px" }) }, o6 = Object.assign({}, s4, a7);
    if (this.columns && this.columns.length > 0) {
      const p2 = this.getGridNotColumnChildren(this.grid);
      return r3.cloneElement(this.grid, o6, this.columns.concat(p2));
    }
    return r3.cloneElement(this.grid, o6);
  }
  getGridNotColumnChildren(t4) {
    return r3.Children.toArray(t4.props.children).filter(
      (s4) => s4 && s4.type && s4.type.displayName !== "KendoReactGridColumn"
    );
  }
};
i4.propTypes = {
  author: import_prop_types3.default.string,
  avoidLinks: import_prop_types3.default.oneOfType([import_prop_types3.default.bool, import_prop_types3.default.string]),
  forcePageBreak: import_prop_types3.default.string,
  keepTogether: import_prop_types3.default.string,
  creator: import_prop_types3.default.string,
  date: import_prop_types3.default.instanceOf(Date),
  imageResolution: import_prop_types3.default.number,
  fileName: import_prop_types3.default.string,
  forceProxy: import_prop_types3.default.bool,
  keywords: import_prop_types3.default.string,
  landscape: import_prop_types3.default.bool,
  margin: import_prop_types3.default.oneOfType([
    import_prop_types3.default.string,
    import_prop_types3.default.number,
    import_prop_types3.default.shape({
      left: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
      top: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
      right: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
      bottom: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string])
    })
  ]),
  pageTemplate: import_prop_types3.default.any,
  paperSize: import_prop_types3.default.any,
  repeatHeaders: import_prop_types3.default.bool,
  scale: import_prop_types3.default.number,
  proxyData: import_prop_types3.default.any,
  proxyURL: import_prop_types3.default.string,
  proxyTarget: import_prop_types3.default.string,
  producer: import_prop_types3.default.string,
  subject: import_prop_types3.default.string,
  title: import_prop_types3.default.string
};
var n5 = i4;

// node_modules/@progress/kendo-react-pdf/treelist/TreeListPDFExport.mjs
var s3 = __toESM(require_react(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);

// node_modules/@progress/kendo-react-pdf/common/table-query.mjs
var s2 = "k-grid-header";
var i6 = "k-grid-footer";
var h5 = "TABLE";
var a5 = f2(h5);
var c4 = class {
  constructor(r4) {
    this.element = r4, this.list = a2(r4, c2("k-grid"));
  }
  content() {
    return a2(this.list, c2("k-grid"));
  }
  header() {
    return this.headerWrap = this.headerWrap || a2(this.element, c2(s2)), a2(this.headerWrap, c2(`${s2}`));
  }
  footer() {
    return this.footerWrap = this.footerWrap || a2(this.element, c2(i6)), a2(this.footerWrap, c2(`${i6}`));
  }
  table() {
    return a2(this.element, a5);
  }
};

// node_modules/@progress/kendo-react-pdf/treelist/export-element.mjs
var y = (s4) => {
  const o6 = new c4(s4), t4 = o6.content();
  let r4;
  const e7 = o6.header();
  if (e7.childNodes.length > 1 && e7.removeChild(e7.childNodes[1]), e7.childNodes[0].childNodes.forEach((c5) => c5.style.top = 0), t4) {
    const c5 = [t4.querySelector("colgroup")], n6 = [e7], d2 = [t4.querySelector("tbody")], l4 = o6.footer(), i7 = l4 ? [l4.querySelector("tfoot")] : [];
    r4 = m(c5, n6, d2, i7);
  } else
    r4 = C(o6.table().cloneNode(true));
  return r4;
};

// node_modules/@progress/kendo-react-pdf/treelist/provideSaveTreeListPDF.mjs
function m3(t4) {
  return (r4, o6 = {}, n6) => u2(t4, r4, o6, n6);
}
function u2(t4, r4, o6 = {}, n6) {
  let e7;
  i7();
  function i7() {
    t4(l4(), o6, d2);
  }
  function d2() {
    document.body.removeChild(e7), e7 = void 0, n6 && n6();
  }
  function l4() {
    e7 = document.createElement("div"), e7.className = "k-treelist-pdf-export-element";
    const p2 = y(r4);
    return e7.appendChild(p2), document.body.appendChild(e7), e7;
  }
}

// node_modules/@progress/kendo-react-pdf/treelist/TreeListPDFExport.mjs
var import_react_dom2 = __toESM(require_react_dom(), 1);
var o4 = class o5 extends s3.Component {
  constructor(t4) {
    super(t4), this.state = {
      show: false
    }, this.showLicenseWatermark = false, this.showLicenseWatermark = !h(e2, { component: "TreeListPDFExport" }), this.saveTreeListPDF = m3(this.getSavePDF()), this.treeListInnerWrapperRef = s3.createRef();
  }
  /**
   * @hidden
   */
  componentDidUpdate(t4, r4) {
    this.state.show && this.state.show !== r4.show && this.saveTreeListPDF(
      this.treeListInnerWrapperRef.current,
      Object.assign({}, this.props, { margin: s(this.props) }),
      this.callback
    );
  }
  /**
   * @hidden
   */
  render() {
    return s3.createElement(s3.Fragment, null, this.state.show && (0, import_react_dom2.createPortal)(
      s3.createElement(
        "div",
        {
          style: {
            position: "absolute",
            left: "-5000px",
            top: "0px"
          }
        },
        s3.createElement("div", { ref: this.treeListInnerWrapperRef }, this.prepareRawTreeListForExport())
      ),
      document.body
    ), this.showLicenseWatermark && s3.createElement(l, null));
  }
  /* eslint-disable max-len */
  /**
   * Saves the content of the TreeList as a PDF file.
   *
   * @param data - The data that will be exported to the PDF. The data can be different from the currently displayed data in the TreeList.
   * @param columns - The columns that will be exported to the PDF. The columns collection can be different from the currently displayed in the TreeList.
   * @param callback - The callback that will be executed after the PDF is saved.
   */
  // tslint:enable:max-line-length
  save(t4, r4, i7) {
    this.treeList = this.getTreeList(), this.columns = r4 || [], this.data = t4, this.callback = () => {
      this.setState({ show: false }), i7 && i7();
    }, this.setState({ show: true });
  }
  getSavePDF() {
    return f;
  }
  getTreeList() {
    const t4 = this.props.children;
    if (t4 && t4.props.data && t4.props.columns)
      return this.props.children;
  }
  prepareRawTreeListForExport() {
    const t4 = this.props.allPages && this.data ? { data: this.data, take: Number.MAX_VALUE, skip: 0 } : {}, r4 = { style: Object.assign({}, this.treeList.props.style, { width: "1000px" }) }, i7 = Object.assign({}, t4, r4);
    return this.columns && this.columns.length > 0 ? s3.cloneElement(this.treeList, Object.assign({}, i7, { columns: this.columns })) : s3.cloneElement(this.treeList, i7);
  }
};
o4.propTypes = {
  author: import_prop_types4.default.string,
  avoidLinks: import_prop_types4.default.oneOfType([import_prop_types4.default.bool, import_prop_types4.default.string]),
  forcePageBreak: import_prop_types4.default.string,
  keepTogether: import_prop_types4.default.string,
  creator: import_prop_types4.default.string,
  date: import_prop_types4.default.instanceOf(Date),
  imageResolution: import_prop_types4.default.number,
  fileName: import_prop_types4.default.string,
  forceProxy: import_prop_types4.default.bool,
  keywords: import_prop_types4.default.string,
  landscape: import_prop_types4.default.bool,
  margin: import_prop_types4.default.oneOfType([
    import_prop_types4.default.string,
    import_prop_types4.default.number,
    import_prop_types4.default.shape({
      left: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]),
      top: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]),
      right: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]),
      bottom: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string])
    })
  ]),
  pageTemplate: import_prop_types4.default.any,
  paperSize: import_prop_types4.default.any,
  repeatHeaders: import_prop_types4.default.bool,
  scale: import_prop_types4.default.number,
  proxyData: import_prop_types4.default.any,
  proxyURL: import_prop_types4.default.string,
  proxyTarget: import_prop_types4.default.string,
  producer: import_prop_types4.default.string,
  subject: import_prop_types4.default.string,
  title: import_prop_types4.default.string,
  allPages: import_prop_types4.default.bool
};
var a6 = o4;
export {
  n5 as GridPDFExport,
  c as KendoDrawingAdapter,
  n3 as PDFExport,
  r as PDFMargin,
  a6 as TreeListPDFExport,
  s as getPageMargin,
  f as savePDF
};
/*! Bundled license information:

@progress/kendo-react-pdf/PDFMargin.mjs:
@progress/kendo-react-pdf/getPageMargin.mjs:
@progress/kendo-react-pdf/KendoDrawingAdapter.mjs:
@progress/kendo-react-pdf/package-metadata.mjs:
@progress/kendo-react-pdf/PDFExport.mjs:
@progress/kendo-react-pdf/savePDF.mjs:
@progress/kendo-react-pdf/common/dom-queries.mjs:
@progress/kendo-react-pdf/grid/grid-query.mjs:
@progress/kendo-react-pdf/common/utils.mjs:
@progress/kendo-react-pdf/grid/export-element.mjs:
@progress/kendo-react-pdf/grid/provideSaveGridPDF.mjs:
@progress/kendo-react-pdf/grid/GridPDFExport.mjs:
@progress/kendo-react-pdf/common/table-query.mjs:
@progress/kendo-react-pdf/treelist/export-element.mjs:
@progress/kendo-react-pdf/treelist/provideSaveTreeListPDF.mjs:
@progress/kendo-react-pdf/treelist/TreeListPDFExport.mjs:
@progress/kendo-react-pdf/index.mjs:
  (**
   * @license
   *-------------------------------------------------------------------------------------------
   * Copyright © 2025 Progress Software Corporation. All rights reserved.
   * Licensed under commercial license. See LICENSE.md in the package root for more information
   *-------------------------------------------------------------------------------------------
   *)
*/
//# sourceMappingURL=@progress_kendo-react-pdf.js.map
