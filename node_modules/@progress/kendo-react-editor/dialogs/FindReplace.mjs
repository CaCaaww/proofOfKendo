/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as e from "react";
import { Button as x } from "@progress/kendo-react-buttons";
import { Window as K } from "@progress/kendo-react-dialogs";
import { TabStrip as O, TabStripTab as b } from "@progress/kendo-react-layout";
import { registerForLocalization as U, provideLocalizationService as B } from "@progress/kendo-react-intl";
import { messages as l } from "../messages/index.mjs";
import { EditorToolsSettings as P } from "../config/toolsSettings.mjs";
import { formatString as q } from "../tools/utils.mjs";
import { TextSelection as E, find as V, replace as j, replaceAll as H, findAll as _, selectedLineTextOnly as $, textHighlightKey as G } from "@progress/kendo-editor-common";
import { IconWrap as T } from "@progress/kendo-react-common";
import { Checkbox as C, Input as y } from "@progress/kendo-react-inputs";
import { Form as M, FormElement as F, FieldWrapper as N } from "@progress/kendo-react-form";
import { chevronLeftIcon as J, chevronRightIcon as Q } from "@progress/kendo-svg-icons";
const X = 13, Y = 27, Z = P.findAndReplace;
let ee = class extends e.Component {
  constructor(o) {
    super(o), this.onTabSelect = (t) => {
      this.setState({ selectedTab: t.selected });
    }, this.onClose = () => {
      const t = this.props.view, a = t.state, n = a.tr.setSelection(
        E.create(a.doc, a.selection.from, a.selection.to)
      );
      t.updateState(a.apply(n)), t.focus(), this.props.onClose.call(void 0);
    }, this.matchesMessage = (t) => {
      const a = this.state.matches, n = this.state.nextMatch;
      let s = 0, i = 0;
      if (a && n) {
        const c = a.findIndex((r) => r.eq(n));
        s = c === -1 ? a.length : c + 1, i = a.length;
      }
      return q(t, s, i);
    }, this.onFindNext = () => {
      this.onFind();
    }, this.onFindPrev = () => {
      this.onFind(!0);
    }, this.onFind = (t = !1) => {
      const a = this.props.view, { searchText: n, matchCase: s, matchCyclic: i, matchWord: c, useRegExp: r } = this.state, h = { text: n, matchWord: c, matchCase: s, useRegExp: r, backward: t, matchCyclic: i }, m = V(a.state, h);
      if (m) {
        const d = a.state.tr.setSelection(m);
        d.scrollIntoView(), a.updateState(a.state.apply(d)), this.setState({ nextMatch: m });
      }
    }, this.onReplace = () => {
      const t = this.props.view, a = t.state.selection, { replaceText: n } = this.state;
      if (!a.empty) {
        const s = a.from, i = s + n.length, c = j(a, n, t.state.tr);
        c.setSelection(E.create(c.doc, s, i)), c.scrollIntoView(), t.dispatch(c), this.setNextState({});
      }
    }, this.onReplaceAll = () => {
      const t = this.props.view, { searchText: a, replaceText: n, matchCase: s, matchWord: i, useRegExp: c } = this.state, r = { text: a, matchWord: i, matchCase: s, useRegExp: c }, h = H(t.state, n, r);
      h && t.dispatch(h), this.setNextState({});
    }, this.onKeyDown = (t) => {
      t.keyCode === X ? this.onFindNext() : t.keyCode === Y && this.onClose();
    }, this.onMatchCaseChecked = (t) => this.setNextState({ matchCase: t.value }), this.onMatchWordChecked = (t) => this.setNextState({ matchWord: t.value }), this.onMatchCyclicChecked = (t) => this.setNextState({ matchCyclic: t.value }), this.onUseRegExpChecked = (t) => this.setNextState({ useRegExp: t.value }), this.onSearchChange = (t) => this.setNextState({ searchText: t.target.value }), this.onReplaceChange = (t) => this.setNextState({ replaceText: t.target.value }), this.setNextState = (t) => {
      const a = {
        ...this.state,
        ...t,
        matches: void 0,
        nextMatch: void 0
      }, n = this.props.view;
      if (a.searchText) {
        const { searchText: s, matchWord: i, matchCase: c, useRegExp: r, matchCyclic: h } = a, m = { text: s, matchWord: i, matchCase: c, useRegExp: r }, d = n.state.selection, p = _(n.state.doc, m), f = (g) => !g && p[0] || p.find((u) => u.from >= d.from) || h && p[0] || void 0;
        this.setState((g) => ({
          ...a,
          matches: p,
          nextMatch: f(g.searchText)
        }));
      } else
        this.setState(a);
    }, this.state = {
      selectedTab: 0,
      searchText: $(o.view.state),
      replaceText: "",
      matchCase: !1,
      matchWord: !1,
      matchCyclic: !1,
      useRegExp: !1
    };
  }
  get settings() {
    return this.props.settings || Z;
  }
  /**
   * @hidden
   */
  componentDidUpdate(o, t) {
    const a = this.props.view, { matches: n = [], nextMatch: s } = this.state;
    if (t.nextMatch !== s) {
      const i = a.state, c = i.tr, r = [];
      n.forEach((h) => {
        r.push({
          from: h.from,
          to: h.to,
          attrs: {
            class: s && h.eq(s) ? "k-text-selected" : "k-text-highlighted"
          }
        });
      }), c.setMeta(G, r), c.setSelection(s || E.create(i.doc, i.selection.from)), a.dispatch(c);
    }
  }
  /**
   * @hidden
   */
  render() {
    const o = B(this), {
      findReplaceDialogTitle: t,
      findReplaceTabFind: a,
      findReplaceTabReplace: n,
      findReplaceFindWhat: s,
      findReplaceReplaceWith: i,
      findReplaceReplace: c,
      findReplaceReplaceAll: r,
      findReplaceMatchCase: h,
      findReplaceMatchWord: m,
      findReplaceMatchCyclic: d,
      findReplaceUseRegExp: p,
      findReplacePrevMatch: f,
      findReplaceNextMatch: g,
      findReplaceMatches: u
    } = this.settings.messages, { matchCase: w, matchWord: W, matchCyclic: L, useRegExp: A, searchText: z, replaceText: D, nextMatch: S } = this.state, k = /* @__PURE__ */ e.createElement("div", { className: "k-search-options" }, /* @__PURE__ */ e.createElement("span", null, /* @__PURE__ */ e.createElement(C, { id: "match-case", checked: w, onChange: this.onMatchCaseChecked }), /* @__PURE__ */ e.createElement("label", { htmlFor: "match-case", className: "k-checkbox-label" }, o.toLanguageString(h, l[h]))), /* @__PURE__ */ e.createElement("span", null, /* @__PURE__ */ e.createElement(C, { id: "match-whole", checked: W, onChange: this.onMatchWordChecked }), /* @__PURE__ */ e.createElement("label", { htmlFor: "match-whole", className: "k-checkbox-label" }, o.toLanguageString(m, l[m]))), /* @__PURE__ */ e.createElement("span", null, /* @__PURE__ */ e.createElement(C, { id: "match-cyclic", checked: L, onChange: this.onMatchCyclicChecked }), /* @__PURE__ */ e.createElement("label", { htmlFor: "match-cyclic", className: "k-checkbox-label" }, o.toLanguageString(
      d,
      l[d]
    ))), /* @__PURE__ */ e.createElement("span", null, /* @__PURE__ */ e.createElement(C, { id: "regular-expression", checked: A, onChange: this.onUseRegExpChecked }), /* @__PURE__ */ e.createElement("label", { htmlFor: "regular-expression", className: "k-checkbox-label" }, o.toLanguageString(p, l[p])))), R = /* @__PURE__ */ e.createElement("div", { className: "k-matches-container" }, /* @__PURE__ */ e.createElement(x, { fillMode: "flat", themeColor: "primary", onClick: this.onFindPrev }, /* @__PURE__ */ e.createElement(T, { name: "chevron-left", icon: J }), o.toLanguageString(f, l[f])), /* @__PURE__ */ e.createElement("span", null, this.matchesMessage(
      o.toLanguageString(u, l[u])
    )), /* @__PURE__ */ e.createElement(x, { fillMode: "flat", themeColor: "primary", onClick: this.onFindNext }, o.toLanguageString(g, l[g]), /* @__PURE__ */ e.createElement(T, { name: "chevron-right", icon: Q }))), v = /* @__PURE__ */ e.createElement(
      M,
      {
        render: () => /* @__PURE__ */ e.createElement(F, { horizontal: !0 }, /* @__PURE__ */ e.createElement(N, null, /* @__PURE__ */ e.createElement("label", { htmlFor: "findWhat", className: "k-form-label" }, o.toLanguageString(
          s,
          l[s]
        )), /* @__PURE__ */ e.createElement("div", { className: "k-form-field-wrap" }, /* @__PURE__ */ e.createElement(
          y,
          {
            id: "findWhat",
            type: "text",
            value: z,
            onChange: this.onSearchChange,
            onFocus: this.onSearchChange,
            onKeyDown: this.onKeyDown,
            autoFocus: !0
          }
        ))))
      }
    ), I = /* @__PURE__ */ e.createElement(
      M,
      {
        render: () => /* @__PURE__ */ e.createElement(F, { horizontal: !0 }, /* @__PURE__ */ e.createElement(N, null, /* @__PURE__ */ e.createElement("label", { htmlFor: "replaceWith", className: "k-form-label" }, o.toLanguageString(
          i,
          l[i]
        )), /* @__PURE__ */ e.createElement("div", { className: "k-form-field-wrap" }, /* @__PURE__ */ e.createElement(
          y,
          {
            id: "replaceWith",
            type: "text",
            value: D,
            onChange: this.onReplaceChange
          }
        ))))
      }
    );
    return /* @__PURE__ */ e.createElement(
      K,
      {
        title: o.toLanguageString(t, l[t]),
        onClose: this.onClose,
        style: { width: "auto", height: "auto", userSelect: "none" },
        resizable: !1,
        minimizeButton: () => null,
        maximizeButton: () => null
      },
      /* @__PURE__ */ e.createElement(
        O,
        {
          selected: this.state.selectedTab,
          className: "k-editor-find-replace",
          onSelect: this.onTabSelect,
          animation: !1
        },
        /* @__PURE__ */ e.createElement(
          b,
          {
            title: o.toLanguageString(a, l[a])
          },
          v,
          k,
          R
        ),
        /* @__PURE__ */ e.createElement(
          b,
          {
            title: o.toLanguageString(
              n,
              l[n]
            )
          },
          v,
          I,
          /* @__PURE__ */ e.createElement("div", { className: "k-actions k-hstack k-justify-content-end" }, /* @__PURE__ */ e.createElement(x, { disabled: !S, onClick: this.onReplace }, o.toLanguageString(
            c,
            l[c]
          )), /* @__PURE__ */ e.createElement(x, { disabled: !S, onClick: this.onReplaceAll }, o.toLanguageString(
            r,
            l[r]
          ))),
          k,
          R
        )
      )
    );
  }
};
U(ee);
export {
  ee as FindAndReplaceDialog
};
