/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2025 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as t from "react";
import { rootFields as p, createDataTree as B, createFlatSchemaDimensions as E, createLocalDataState as q } from "@progress/kendo-pivotgrid-common";
const z = "aggregate", G = "columns", w = { dataField: z, columnsData: G }, l = "&", H = (e) => {
  const [c, h] = t.useState(!0), [o, v] = t.useState(e.defaultColumnAxes || []), [a, D] = t.useState(e.defaultRowAxes || []), [i, F] = t.useState(e.defaultMeasureAxes || []), [m, R] = t.useState(e.defaultSort || []), [d, b] = t.useState(e.defaultFilter || []), [f, k] = t.useState(/* @__PURE__ */ new Map()), g = t.useCallback((s) => {
    D(s.value);
  }, []), M = t.useCallback((s) => {
    v(s.value);
  }, []), L = (s) => {
    F(s.value);
  }, P = (s) => {
    R(s.value);
  }, T = (s) => {
    b(s.value);
  }, S = t.useMemo(
    () => Array.from(p(o).keys()).join(l),
    [o]
  ), A = t.useMemo(() => Array.from(p(a).keys()).join(l), [a]), n = t.useCallback(
    (s) => ({ key: s, ...e.dimensions[s] }),
    [e.dimensions]
  ), u = t.useMemo(
    () => S ? S.split(l).map(n) : [],
    [S, n]
  ), r = t.useMemo(
    () => A ? A.split(l).map(n) : [],
    [A, n]
  ), x = t.useMemo(
    () => i.map((s) => e.measures.find((j) => String(j.name) === String(s.name))).filter(Boolean),
    [i, e.measures]
  );
  t.useEffect(() => {
    h(!0), setTimeout(() => {
      const s = B(
        e.data,
        r,
        u,
        x,
        w,
        d
      );
      k(s), h(!1);
    }, 0);
  }, [e.data, r, u, x, d]);
  const y = t.useMemo(
    () => E(e.dimensions, e.measures),
    [e.dimensions, e.measures]
  ), C = t.useMemo(
    () => q({
      dataTree: f,
      rowSettings: r,
      columnSettings: u,
      rowAxes: a,
      columnAxes: o,
      measures: x,
      sort: m,
      fields: w
    }),
    [o, u, f, a, r, m]
  );
  return {
    pivotProps: {
      rowAxes: a,
      columnAxes: o,
      data: C.data,
      rows: C.rows,
      columns: C.columns,
      onRowAxesChange: g,
      onColumnAxesChange: M
    },
    configuratorProps: {
      sort: m,
      onSortChange: P,
      filter: d,
      onFilterChange: T,
      data: y,
      rowAxes: a,
      columnAxes: o,
      measureAxes: i,
      onRowAxesChange: g,
      onColumnAxesChange: M,
      onMeasureAxesChange: L
    },
    state: {
      loading: c
    }
  };
}, J = (e) => {
  const c = H(e);
  return e.children(c);
};
export {
  J as PivotLocalDataService,
  H as usePivotLocalDataService
};
